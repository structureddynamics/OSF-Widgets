<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2009 Team Axiis

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->

<!---
	VAxis renders values from bottom to top between a minimum and maximum value,
	and is intended to be rendered to the left of other layouts
	to provide a point of reference for those visualizations.
	
	<p>
	VAxis can optionally label each major tick mark or render gridlines
	aligned to the axis itself.
	</p>
	
	<p>
	The majority of the functionality of VAxis is contained within its super
	class, AxisBase.
	</p>
	@see AxiisBase
-->
<axis:AxisBase xmlns="*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:layouts="org.axiis.layouts.*" 
	xmlns:degrafa="http://www.degrafa.com/2007" 
	xmlns:scale="org.axiis.layouts.scale.*"
	xmlns:utils="org.axiis.utils.*" 
	itemPreDraw="onItemPreDraw();"
	xmlns:axis="org.axiis.charts.axis.*"
	xmlns:core="org.axiis.core.*"
	xmlns:utils1="org.axiis.layouts.utils.*">
    
	<mx:Script>
		<![CDATA[
			import org.axiis.layouts.scale.AbstractScale;
			import org.axiis.layouts.scale.IScale;
			import com.degrafa.core.IGraphicsStroke;
			
			[Bindable]
			private var _totalMajorTicks:int;
			
			[Bindable] 
			private var _gapStep:Number;
			
			[Bindable]
			private var _majorTickInterval:Number;
			
			[Bindable]
			private var _labelInterval:Number;
			
			[Bindable]
			/**
			 * The scale used to determine the text of each label.
			 */
			public function get verticalScale():IScale {
				return _verticalScale;
			}
			public function set verticalScale(value:IScale):void {
				removeScaleListeners();
				_verticalScale=value;
				addScaleListeners();
			}
			private var _verticalScale:IScale;
			
			private function addScaleListeners():void {
				AbstractScale(_verticalScale).addEventListener("invalidated",onScaleChange);
			}
			
			private function removeScaleListeners():void {
				if (!_verticalScale) return;
				AbstractScale(_verticalScale).removeEventListener("invalidate",onScaleChange);
			}
			
			private function onScaleChange(e:Event):void {
				onValueChanged();
				this.invalidate();
			}
			
			private function onValueChanged():void
			{
				if (this.height==0 || isNaN(this.height))
					return;
				
				//First determine the minor tick interval
				var tempArray:Array=new Array();
				
				_totalMajorTicks=Math.floor(this.height/majorTickSpacing);
				var totalMinorTicks:int=Math.floor((this.height/_totalMajorTicks)/tickGap)*_totalMajorTicks;
			
				_majorTickInterval=totalMinorTicks/_totalMajorTicks;
				
				_gapStep=this.height/totalMinorTicks;
				
				for (var i:int=0;i<totalMinorTicks+1;i++)
				{
					tempArray.push(i);
				}
				dataProvider=tempArray;
				
				gridRect.height=height / _totalMajorTicks;
			}
			
			private function onItemPreDraw():void
			{
				label.fontFamily=fontFamily;
				label.x=-label.textWidth-5;
				label.y=currentReference.y-label.height/2;
			}
		]]>
	</mx:Script>
	
	<!--- @private -->
	<utils:BooleanExpression id="showLabel" value="{ (showLabels &amp;&amp; (showMajorTick.value==true))}"/>
	
	<!--- @private -->
	<utils:BooleanExpression id="showMinorTick" value="{ !(showMajorTick.value==true)}"/>
	
	<!--- @private -->
	<utils:BooleanExpression id="showMajorTick" value="{(majorTickSpacing > 0 &amp;&amp; (this.currentIndex % _majorTickInterval) == 0)}"/>
	
	<!--- @private -->
	<utils:BooleanExpression id="showGrid" value="{((this.currentIndex % (_majorTickInterval*2))==0 &amp;&amp; currentIndex &lt; itemCount-1)}"/>
	
	<!--- @private -->
	<utils:NumericExpression id="repeaterCount" value="{Math.floor(this.height)}" valueChanged="onValueChanged();" />
	
	<!--- @private -->
	<utils:NumericExpression id="tickGapWatcher" value="{tickGap}" valueChanged="onValueChanged();" />
	
	
	<axis:referenceRepeater>
		<utils1:GeometryRepeater> 
			<utils1:geometry>
				<degrafa:Line x="0" x1="{this.width}" height="{this.height}" y="{0}" y1="0" width="{this.width}"/>
			</utils1:geometry>
			<utils1:modifiers>
				<utils1:PropertyModifier property="y" modifier="{_gapStep}" modifierOperator="add"/>
			</utils1:modifiers>
		</utils1:GeometryRepeater>
	</axis:referenceRepeater>
	<axis:drawingGeometries>
		<!--- @private -->
		<degrafa:RegularRectangle id="gridRect"
			x="{majorTickLength}"
			y="{currentReference.y}"
			width="{width}" 
			fill="{gridFill}"
			visible="{showGrid.value &amp;&amp; showGridArea}"/>				  
		
		<!--- @private -->
		<degrafa:Line  id="gridLine"  y="{currentReference.y}" y1="{currentReference.y}" x="0" x1="{width}"
			visible="{showGrid.value &amp;&amp; showGridLine}"
			stroke="{gridStroke}"/>
		
		<!--- @private -->
		<degrafa:Line id="minorTick" stroke="{tickStroke}"
			x="{majorTickLength-minorTickLength}" x1="{majorTickLength}"  visible="{showMinorTick.value}"
			y="{currentReference.y}" y1="{currentReference.y}"
			/>
		
		<!--- @private -->
		<degrafa:Line id="majorTick" stroke="{tickStroke}" 
			x="0" x1="{majorTickLength}" visible="{showMajorTick.value}"
			y="{currentReference.y}" y1="{currentReference.y}"
			/>
		
		<!--- @private -->
		<degrafa:RasterText id="label" align="right" autoSizeField="true"
			fontFamily="fontFamily" fontSize="{fontSize}" fontWeight="{fontWeight}" textColor="{fontColor}"
			text="{labelFunction(Number(verticalScale.layoutToValue(height-currentReference.y)))}" visible="{showLabel.value}"/>
	</axis:drawingGeometries>

</axis:AxisBase>