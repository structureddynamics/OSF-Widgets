<?xml version="1.0" encoding="utf-8"?>

<!---
  The bar char is a component that displays record (numeric) attributes on a bar 
  chart. It is used to display the values of different attributes of a record 
  description so that users can easily compare the values of these comparable 
  attributes.
  
  Each bar on the graph is the value of a single attribute describing the target 
  record description.   

  @author Frederick Giasson, Structured Dynamics LLC.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:axiis="org.axiis.*"
  xmlns:axis="org.axiis.charts.axis.*" xmlns:degrafa="http://www.degrafa.com/2007"
  xmlns:charts="org.axiis.charts.*" xmlns:geometry="com.degrafa.geometry.*" xmlns:layouts="org.axiis.layouts.*"
  xmlns:series="org.axiis.charts.series.*" xmlns:groupings="org.axiis.charts.groupings.*"
  xmlns:states="org.axiis.states.*" xmlns:scales="org.axiis.layouts.scale.*" xmlns:paint="org.axiis.paint.*"
  xmlns:labels="org.axiis.charts.labels.*" creationComplete="init()" width="100%" height="100%" styleName="sBarChart">
  <mx:Metadata>
    [Event(name="itemClick", type="com.sd.semantic.events.SemanticComponentItemEvent")]
  </mx:Metadata>

  <mx:Script>
  <![CDATA[
    import com.sd.semantic.core.Schema;
    import com.sd.semantic.core.SchemaAttribute;
    import com.sd.semantic.core.Subject;
    import com.sd.semantic.events.*;
    import com.sd.semantic.settings.GeneralSettings;
    import com.sd.semantic.core.Resultset;    
    
    import mx.core.Application;
    
    import org.axiis.core.AxiisSprite;
    import org.axiis.data.DataSet;
    import org.axiis.events.LayoutItemEvent;    
    import org.axiis.states.State;
    
    /** Core varibles shared amongst all semantic controls */
    
    /** 
     * Specifies that this component is a semantic component. If a component in a Flex application is a semantic
     * semantic component, this means that other semantic component can't behave differently depending of the "kind"
     * (semantic or not) of components that are present in the layout. This variable is just to specify is a component
     * is a semantic one or not.
     */
    public var semanticComponent:Boolean = true;
    
    /**
     * Specifies that this control is required within a display cluster.
     * This means that if we have a SemanticHBox that has 2 required semantic
     * components and that these components have removed themselves from the display
     * this means that the parent layout cluster (the smeantic hbox), will remove
     * itself as well. If a semantic component is marked as not required (required=false)
     * it means that it won't be considered by the semantic hbox. So, even if such a semantic
     * component has data in it, its parent cluster can remove itself.
     */
    public var required:Boolean = true;
    
    /** Target record attributes to display in the component */
    public var targetAttributes:Array = [];
    
    /** Target record types to display in the component */
    public var targetTypes:Array = [];
    
    /** Specifies if the sControl's targetAttribute has been bound to a know semantic control. */
    public var bound:Boolean = false;
    
    private var _semanticDataProvider:Resultset;
    
    /** Input records. This is a Resultset structure (see the structXML XML data structure) */
    public function get semanticDataProvider():Resultset
    {
      return (_semanticDataProvider);
    }
    
    public function set semanticDataProvider(value:Resultset):void
    {
      _semanticDataProvider = value;
      
      if(_initialized)
      {
        init();
      }
    }
    
    /** Specifies what attribute(s) of a record have been bound to this semantic component */
    public var boundAttributes:Array = [];
    
    /** Specifies if the component has already been initialized or not. */
    private var _initialized:Boolean = false;

    /** Axiis DataSet used to populate the Axiis components */
		private var ds:DataSet = new DataSet();
  
    /** Schema structure loaded for this semantic component */
    private var _schema:Schema = null;
  
    private var generalSettings:GeneralSettings = null;
    
    /** General settings of the semantic application */
    public function get schema():Schema
    {
      return (_schema);
    }
  
    public function set schema(value:Schema):void
    {
      this._schema = value;
    }
  
    /** Invalidate the bar chart to redraw it */
    public function invalidate():void
    {
    	init();
    }
  
    /** Initialize the bar chart component */    
		public function init():void
		{
			if(_semanticDataProvider != null)
			{
        /**
         * Load settings
         * 
         * Check if the application that embede this semantic component defined its 
         * baseAppUrl. If it didn't, we simply use the default local location "./"
         */
        
        /** Base URL of the flex component */
        var baseUrl:String = "./";
        
        if(Application.application.hasOwnProperty("baseAppUrl"))
        {
          if(Application.application.baseAppUrl != "")
          {
            baseUrl = Application.application.baseAppUrl;
          }
        } 
        else if(Application.application.parameters.baseAppUrl)
        {
          if(Application.application.parameters.baseAppUrl != "")
          {
            baseUrl = Application.application.parameters.baseAppUrl;
          }
        }
        
        var settingsLoader:URLLoader = new URLLoader();
        settingsLoader.load(new URLRequest(baseUrl + "settings/General.xml"));
        settingsLoader.addEventListener(Event.COMPLETE, processSettingsHandler);  
        
        /** Keep track of the attributes, from the record, that have been bound to this control. */
        if(targetAttributes.length > 0)
        {
          for each(var tAttr in targetAttributes)
          {
            boundAttributes.push(tAttr);
          }
        }
			}
			
			_initialized = true;
		}
  
    /**
     * Get, parse and process the map settings 
     * 
     * @param event URLLoader success/failure event
     */
    private function processSettingsHandler(event:Event):void
    {
      /** Check if there is any load/parsing error */
      var isError:Boolean = false;
      
      try
      { 
        /** Create the GeneralSettings class from the XML file */
        generalSettings = new GeneralSettings(new XML(event.target.data));
      }
      catch(error:Error)
      { 
        Alert.show("Can't load settings file '/settings/General.xml'. The bar chart tool won't be displayed." +
                   "(" + error.message + ")");
        isError = true;
      }
      
      if(!isError)
      {
        if(generalSettings.error == true)
        {
          Alert.show("Required settings are missing in the settings file '/settings/General.xml'. The bar chart tool won't be displayed.");
          isError = true;
        }
      }
      
      /** If the setting file is properly loaded, we continue to process the bar chart component */
      if(!isError)
      {
        vScale.minValue = 0;		
        vScale.maxValue = 0;				
        
        /**
        * If only one record is available in the resultset, then we
        * uses the target attributes to populate the X axis, and their
        * values to populate the Y axis.
        */
        
        /** XML data to load in the Axiis DataSet structure used to load in the bar chart component */
        var xml:String = "<attributes>";
        
        targetAttributes.sort();
        
        if(_semanticDataProvider.subjects.length == 1 && targetAttributes.length > 1)
        {
          /**
          * Usecase #1: One record with multiple target attributes
          */
          
          for each(var predKey:String in targetAttributes)
          {
            if(_semanticDataProvider.subjects[0].predicates.hasOwnProperty(predKey))
            {							
              for each(var obj:Array in _semanticDataProvider.subjects[0].predicates[predKey])
              {
                if(Number(obj["value"]) > 0 || obj["value"] == "0")
                {
                  /** Get the preferred label of the attribute */
                  var attribute:SchemaAttribute = this.schema.getAttribute(predKey);
                  var label:String = "";
                  
                  if(attribute && attribute.shortLabel == "")
                  {
                    label = attribute.prefLabel;
                  }
                  else
                  {
                    label = attribute.shortLabel;
                  }
                  
                  obj["value"] = Number(obj["value"]);
                  
                  xml += "<attribute prefLabel=\"" + label + "\" count=\"" + obj["value"] + "\" uri=\"" + _semanticDataProvider.subjects[0].uri + "\" />";
                  
                  if(vScale.maxValue < obj["value"])
                  {
                    vScale.maxValue = obj["value"];
                  }
                }
                else
                {
                  /** @todo: throw an error */
                  /** error: non numeric value found in the target attributes. The bar chart can't be generated. */
                }
              }								
            }
          }																		
        }
        else if(_semanticDataProvider.subjects.length > 0 && targetAttributes.length == 1)
        {
          /**
          * Usecase #2: One or multiple records with a single target attribute
          */
          
          for each(var subject:Subject in _semanticDataProvider.subjects)
          {
            /** Make sure that the targetAttribute is defined for each target record */
            if(subject.predicates.hasOwnProperty(targetAttributes[0]))
            {
              if(Number(subject.predicates[targetAttributes[0]][0]["value"]) > 0 || subject.predicates[targetAttributes[0]][0]["value"] == "0")
              {
                /** Get the preferred label of the record */
                var label:String = subject.getPrefLabel(generalSettings.prefLabelAttributes);
                
                subject.predicates[targetAttributes[0]][0]["value"] = Number(subject.predicates[targetAttributes[0]][0]["value"]);
                
                xml += "<attribute prefLabel=\"" + label + "\" count=\"" + subject.predicates[targetAttributes[0]][0]["value"] + "\" uri=\"" + subject.uri + "\" />";
                
                if(vScale.maxValue < subject.predicates[targetAttributes[0]][0]["value"])
                {
                  vScale.maxValue = subject.predicates[targetAttributes[0]][0]["value"];
                }                  
              }        
              else
              {
                /** @todo: throw an error */
                /** error: non numeric value found in the target attributes. The bar chart can't be generated. */
              }                
            }
          }
        }
        else if(_semanticDataProvider.subjects.length > 1 && targetAttributes.length > 1)
        {
          /**
          * Usecase #3: Multiple records with a multiple target attributes
          *
          * In this usecase, we take the first record as the target record, and build the graph according
          * to the usecase #1.
          */
        }
        
        xml += "</attributes>";
        
        /** If no attributes are available, then we return to make sure we don't compute the dataset for the bar char */
        if(xml == "<attributes></attributes>")
        {
          return;
        }
        
        /** Parse the XML file in the DataSet Axiis structure */
        ds.processXmlString(xml);
        
        /** Create the aggregates that will be used to create the bar chart */
        ds.aggregateData(ds.data.object, "attributes.attribute", ["count"]);
        ds.aggregateData(ds.data.object, "attributes", ["aggregates.attribute_count_sum"]);
        
        /** feed the component with the data */
        dataProvider = ds.data.object.attributes;					
        
        /** invalidate/refresh the bar chart component */
        dc.invalidateDisplayList();          
      }
      
      this.removeEventListener(Event.COMPLETE, processSettingsHandler);
    }         
  
    /** Column mouse click event handler */
    private function itemClickHandler(event:LayoutItemEvent):void
    {
      if(event.item.data)
      {
        /** Object to return composed of the prefLabel of the target record, and its URI */
        var record:Object = {prefLabel: event.item.data.prefLabel, uri: event.item.data.uri};
        
        /** Dispatch a bubbling item click event that will be catchable by the main application */
        dispatchEvent(new SemanticComponentItemEvent(SemanticComponentItemEvent.ITEM_CLICK, record, true));
      }
    }
  
    /** Column mouse over event handler */
    private function itemOverHandler(event:LayoutItemEvent):void
    {
      if(event.item.data)
      {
        /** Object to return composed of the prefLabel of the target record, and its URI */
        var record:Object = {prefLabel: event.item.data.prefLabel, uri: event.item.data.uri};
        
        /** Dispatch a bubbling item over event that will be catchable by the main application */
        dispatchEvent(new SemanticComponentItemEvent(SemanticComponentItemEvent.ITEM_OVER, record, true));
      }
    }
    
    /** Column mouse over out event handler */    
    private function itemOutHandler(event:LayoutItemEvent):void
    {
      if(event.item.data)
      {
        /** Object to return composed of the prefLabel of the target record, and its URI */
        var record:Object = {prefLabel: event.item.data.prefLabel, uri: event.item.data.uri};
        
        /** Dispatch a bubbling item over event that will be catchable by the main application */
        dispatchEvent(new SemanticComponentItemEvent(SemanticComponentItemEvent.ITEM_OUT, record, true));
      }
    }
    
    /**
     * Select a target record in the component.
     * 
     * @param record Target subject record to be selected in the component. This object is expected to have
     *               a "uri" property that is used to find the record to select in the component.
     */
    public function selectRecord(record:Object):void
    {
      /** Make sure that the target record has the uri property defined */
      if(record.hasOwnProperty("uri"))
      {
        for(var spriteIndex:String in myCluster.childSprites)
        {
          /** find the state of the AxiisSprite that select a line region */
          for each(var state:State in myCluster.childSprites[spriteIndex].states)
          {
            if(myCluster.childSprites[spriteIndex].data)
            {
              if(state.enterStateEvent == "mouseOver" && state.exitStateEvent == "mouseOut" && myCluster.childSprites[spriteIndex].data.uri == record.uri)
              {
                /** Lets remove all states of all AxiisSprite of this component */
                for each(var childSprite:AxiisSprite in myCluster.childSprites)
                {
                  childSprite.clearStates();
                }
                
                /** We found the state we need to select the record. Now lets enable it */
                myCluster.childSprites[spriteIndex].setState(state);
                
                break;
              }
            }
          }
        }
      }      
    } 
  
    /**
     * Unselect all possible selected records in the chart
     */
    public function unselectRecords():void
    {
      /** Remove all states of all AxiisSprites of this component */
      for each(var childSprite:AxiisSprite in myCluster.childSprites)
      {
        childSprite.clearStates();
      }
    }      
    
    /** Format the attribute labels properly on the axis */
    private function axisLabel(obj:Object):String
    {
      if(Number(obj) < 10)
      {
        return(formatter0to10.format(Number(obj)));
      }
      else if(Number(obj) >= 10 && Number(obj) < 100)
      {
        return(formatter10to100.format(Number(obj)));
      }
      else if(Number(obj) >= 100 && Number(obj) < 10000)
      {
        return(formatter100to10000.format(Number(obj)));
      }
      else
      {
        return(formatter10000andOver.format(Number(obj) / 1000));
      }
    }
    
		]]>
  </mx:Script>

  <!--  GLOBAL VARIABLES -->
  <mx:Object id="dataProvider"/>

  <mx:String id="verticalField"/>

  <mx:String id="dataField">count</mx:String>

  <mx:String id="labelField">prefLabel</mx:String>

  <mx:String id="childDataField">count</mx:String>

  <mx:String id="childLabelField">prefLabel</mx:String>

  <mx:Number id="percentGap">.02</mx:Number>
  
  <mx:CurrencyFormatter precision="2" id="formatter0to10" alignSymbol="right" currencySymbol=""/>
  <mx:CurrencyFormatter precision="1" id="formatter10to100" alignSymbol="right" currencySymbol=""/>
  <mx:CurrencyFormatter precision="0" id="formatter100to10000" alignSymbol="right" currencySymbol=""
                        useThousandsSeparator="true"/>
  <mx:CurrencyFormatter currencySymbol="k" precision="0" id="formatter10000andOver" alignSymbol="right"
                        useThousandsSeparator="true"/>
  
  <scales:LinearScale dataProvider="{dataProvider}" minLayout="0" minValue="0" maxLayout="{hLayout.height}"
    id="vScale"/>

  <axiis:DataCanvas top="30" bottom="30" width="{this.width*.75}" id="dc" verticalCenter="0"
    horizontalCenter="0" showDataTips="true" strokes="{strokes}" fills="{fills}" palettes="{palettes}">

    <!-- Background -->
    <axiis:backgroundGeometries>
      <axis:VAxis verticalScale="{vScale}" tickStroke="{axisStroke}" width="{dc.width}"
        height="{hLayout.height}" showDataTips="false" fontFamily="Myriad Pro" fontColor="0" fontSize="14" tickGap="5"
        labelFunction="{axisLabel}" id="vAxis"/>
    </axiis:backgroundGeometries>

    <!-- Layouts -->
    <axiis:layouts>
      <layouts:HBoxLayout id="hLayout" x="25" y="0" showDataTips="false" height="{dc.height-70}"
        width="{dc.width-25}" percentGap="{percentGap}" dataProvider="{dataProvider}" dataField="attribute"
        labelField="">
        <layouts:layouts>
          <!-- Cluster Group -->
          <groupings:ColumnCluster id="myCluster" width="{hLayout.currentReference.width*.9}"
            height="{hLayout.currentReference.height}" y="0" x="{hLayout.currentReference.width*.05}"
            dataProvider="{hLayout.currentValue}" dataField="{dataField}" labelField="{labelField}"
            percentGap=".05" fill="{clusterFill}" stroke="{colStroke}" verticalScale="{vScale}"
            fontFamily="Myriad Pro" dataFontColor="{outerPalette.currentColor}"
            fontColor="{outerPalette.currentColor &amp; -0x333333}" itemClick="itemClickHandler(event)"
            itemMouseOver="itemOverHandler(event)" itemMouseOut="itemOutHandler(event)" showDataLabel="false"/>
        </layouts:layouts>
      </layouts:HBoxLayout>
    </axiis:layouts>
  </axiis:DataCanvas>

  <mx:Array id="palletsColors">
    <mx:uint>0xFFeb0810</mx:uint>
    <mx:uint>0xFFf5800b</mx:uint>
    <mx:uint>0xFFf4e601</mx:uint>
    <mx:uint>0xFFc6d816</mx:uint>
    <mx:uint>0xFF0c5e2c</mx:uint>
    <mx:uint>0xFF00a5d9</mx:uint>
    <mx:uint>0xFF581886</mx:uint>
    <mx:uint>0xFFab1057</mx:uint>
  </mx:Array>
  
  <mx:Array id="textPalletsColors">
    <mx:uint>0xFF000000</mx:uint>
  </mx:Array>
  
  
  <mx:Array id="palettes">
    <!--paint:LayoutAutoPalette id="outerPalette" layout="{myCluster}" colorFrom="0x3333CC" colorTo="0xCC3333"/>

    <paint:LayoutAutoPalette id="clusterPalette" layout="{myCluster}" colorFrom="{outerPalette.currentColor}"
      colorTo="{outerPalette.currentColor | 0x337f00}"/>

    <paint:LayoutAutoPalette id="areaPalette" layout="{myCluster}" colorFrom="0xCC3333" colorTo="0x3333CC"/-->

    <paint:LayoutPalette id="outerPalette" layout="{myCluster}"  colors="{textPalletsColors}"/>
    
    <paint:LayoutPalette id="clusterPalette" layout="{myCluster}" colors="{palletsColors}"/>
    
    <paint:LayoutPalette id="areaPalette" layout="{myCluster}" colors="{palletsColors}"/>
    
    
  </mx:Array>

  <mx:Array id="fills">
    <degrafa:LinearGradientFill id="areaFill" angle="90" enableEvents="false">
      <degrafa:GradientStop color="{areaPalette.currentColor}" alpha=".95"/>

      <degrafa:GradientStop color="{areaPalette.currentColor | 0x999933}" alpha=".65"/>
    </degrafa:LinearGradientFill>

    <degrafa:LinearGradientFill id="clusterFill" angle="45" enableEvents="false">
      <degrafa:GradientStop color="{clusterPalette.currentColor}"/>

      <degrafa:GradientStop color="{clusterPalette.currentColor | 0xFFFFFF}" alpha=".85"/>
    </degrafa:LinearGradientFill>
  </mx:Array>

  <mx:Array id="strokes">
    <degrafa:LinearGradientStroke id="colStroke" pixelHinting="true" angle="45" enableEvents="false">
      <degrafa:GradientStop color="0xFFFFFF" alpha=".7"/>

      <degrafa:GradientStop color="0xFFFFFF" alpha=".3"/>
    </degrafa:LinearGradientStroke>

    <degrafa:SolidStroke color="0xFFFFFF" alpha=".3"/>

    <degrafa:SolidStroke color="0x222222" id="axisStroke" pixelHinting="true"/>

    <degrafa:SolidStroke color="{areaPalette.currentColor}" id="myStroke" weight="1" alpha="1" caps="none"
      pixelHinting="true"/>
  </mx:Array>
</mx:Canvas>